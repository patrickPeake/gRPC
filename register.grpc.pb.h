// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: register.proto
#ifndef GRPC_register_2eproto__INCLUDED
#define GRPC_register_2eproto__INCLUDED

#include "register.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace register_service {

class RegisterService final {
 public:
  static constexpr char const* service_full_name() {
    return "register_service.RegisterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::register_service::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> AsyncGetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(AsyncGetAllRegisterArraysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> PrepareAsyncGetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(PrepareAsyncGetAllRegisterArraysRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::register_service::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> AsyncGetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(AsyncGetRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> PrepareAsyncGetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(PrepareAsyncGetRegisterArrayRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::register_service::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> AsyncCreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(AsyncCreateRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> PrepareAsyncCreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(PrepareAsyncCreateRegisterArrayRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::register_service::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> AsyncDeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(AsyncDeleteRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>> PrepareAsyncDeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>>(PrepareAsyncDeleteRegisterArrayRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* AsyncGetAllRegisterArraysRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* PrepareAsyncGetAllRegisterArraysRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* AsyncGetRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* PrepareAsyncGetRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* AsyncCreateRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* PrepareAsyncCreateRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* AsyncDeleteRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::register_service::Response>* PrepareAsyncDeleteRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::register_service::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> AsyncGetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(AsyncGetAllRegisterArraysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> PrepareAsyncGetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(PrepareAsyncGetAllRegisterArraysRaw(context, request, cq));
    }
    ::grpc::Status GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::register_service::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> AsyncGetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(AsyncGetRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> PrepareAsyncGetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(PrepareAsyncGetRegisterArrayRaw(context, request, cq));
    }
    ::grpc::Status CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::register_service::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> AsyncCreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(AsyncCreateRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> PrepareAsyncCreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(PrepareAsyncCreateRegisterArrayRaw(context, request, cq));
    }
    ::grpc::Status DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::register_service::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> AsyncDeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(AsyncDeleteRegisterArrayRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>> PrepareAsyncDeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::register_service::Response>>(PrepareAsyncDeleteRegisterArrayRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) override;
      void GetAllRegisterArrays(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) override;
      void GetRegisterArray(::grpc::ClientContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) override;
      void CreateRegisterArray(::grpc::ClientContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response, std::function<void(::grpc::Status)>) override;
      void DeleteRegisterArray(::grpc::ClientContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* AsyncGetAllRegisterArraysRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* PrepareAsyncGetAllRegisterArraysRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* AsyncGetRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* PrepareAsyncGetRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* AsyncCreateRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* PrepareAsyncCreateRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* AsyncDeleteRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::register_service::Response>* PrepareAsyncDeleteRegisterArrayRaw(::grpc::ClientContext* context, const ::register_service::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllRegisterArrays_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRegisterArray_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRegisterArray_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRegisterArray_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response);
    virtual ::grpc::Status GetRegisterArray(::grpc::ServerContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response);
    virtual ::grpc::Status CreateRegisterArray(::grpc::ServerContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response);
    virtual ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRegisterArrays(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::register_service::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegisterArray(::grpc::ServerContext* context, ::register_service::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::register_service::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRegisterArray(::grpc::ServerContext* context, ::register_service::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::register_service::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRegisterArray(::grpc::ServerContext* context, ::register_service::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::register_service::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllRegisterArrays<WithAsyncMethod_GetRegisterArray<WithAsyncMethod_CreateRegisterArray<WithAsyncMethod_DeleteRegisterArray<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::register_service::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::register_service::Response* response) { return this->GetAllRegisterArrays(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllRegisterArrays(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::register_service::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::register_service::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRegisterArrays(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::register_service::GetRequest, ::register_service::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::register_service::GetRequest* request, ::register_service::Response* response) { return this->GetRegisterArray(context, request, response); }));}
    void SetMessageAllocatorFor_GetRegisterArray(
        ::grpc::MessageAllocator< ::register_service::GetRequest, ::register_service::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::register_service::GetRequest, ::register_service::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::register_service::CreateRequest, ::register_service::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::register_service::CreateRequest* request, ::register_service::Response* response) { return this->CreateRegisterArray(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRegisterArray(
        ::grpc::MessageAllocator< ::register_service::CreateRequest, ::register_service::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::register_service::CreateRequest, ::register_service::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::register_service::DeleteRequest, ::register_service::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::register_service::DeleteRequest* request, ::register_service::Response* response) { return this->DeleteRegisterArray(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRegisterArray(
        ::grpc::MessageAllocator< ::register_service::DeleteRequest, ::register_service::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::register_service::DeleteRequest, ::register_service::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllRegisterArrays<WithCallbackMethod_GetRegisterArray<WithCallbackMethod_CreateRegisterArray<WithCallbackMethod_DeleteRegisterArray<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllRegisterArrays(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegisterArray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRegisterArray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRegisterArray(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllRegisterArrays(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllRegisterArrays(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRegisterArray(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRegisterArray(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRegisterArray(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRegisterArray(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllRegisterArrays : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllRegisterArrays() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::register_service::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::register_service::Response>* streamer) {
                       return this->StreamedGetAllRegisterArrays(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllRegisterArrays() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllRegisterArrays(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllRegisterArrays(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::register_service::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRegisterArray() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::register_service::GetRequest, ::register_service::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::register_service::GetRequest, ::register_service::Response>* streamer) {
                       return this->StreamedGetRegisterArray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::GetRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRegisterArray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::register_service::GetRequest,::register_service::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRegisterArray() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::register_service::CreateRequest, ::register_service::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::register_service::CreateRequest, ::register_service::Response>* streamer) {
                       return this->StreamedCreateRegisterArray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::CreateRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRegisterArray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::register_service::CreateRequest,::register_service::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRegisterArray : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRegisterArray() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::register_service::DeleteRequest, ::register_service::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::register_service::DeleteRequest, ::register_service::Response>* streamer) {
                       return this->StreamedDeleteRegisterArray(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRegisterArray() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRegisterArray(::grpc::ServerContext* /*context*/, const ::register_service::DeleteRequest* /*request*/, ::register_service::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRegisterArray(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::register_service::DeleteRequest,::register_service::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllRegisterArrays<WithStreamedUnaryMethod_GetRegisterArray<WithStreamedUnaryMethod_CreateRegisterArray<WithStreamedUnaryMethod_DeleteRegisterArray<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllRegisterArrays<WithStreamedUnaryMethod_GetRegisterArray<WithStreamedUnaryMethod_CreateRegisterArray<WithStreamedUnaryMethod_DeleteRegisterArray<Service > > > > StreamedService;
};

}  // namespace register_service


#endif  // GRPC_register_2eproto__INCLUDED
